-# This template represents a profile field, which can be shown on profiles of users or groups.
-# A profile field can either have just label and value or it can have child profile fields
-# in order to display complex information such as bank account information.
-#
- profile_field_css_class = profile_field.parent ? 'attribute profile_field profile_field_child' : 'attribute profile_field profile_field_parent'
- profile_field_css_class += " #{profile_field.key}" if profile_field.parent_id
- input_type = :input
- input_type = :textarea if %w(ProfileFieldTypes::Address ProfileFieldTypes::Description ProfileFieldTypes::About).include? profile_field.type
- collection = nil
- if profile_field.parent.present? and profile_field.key.to_s == 'country_code'
  - input_type = :select
  - country_codes = GeoLocation.country_codes.sort
  - collection = Hash[*country_codes.zip(country_codes).flatten]
-# # For the moment, no 'date' type. The date selector does not work properly with edit_mode.
-# input_type = 'date' if profile_field.type == "ProfileFieldTypes::Date"
- no_remove ||= false
- lock_label ||= false

%li{:class => profile_field_css_class, id: "profile_field_id_#{profile_field.id}" }

  - # remove button
  - unless no_remove
    %span.button-wrapper
      - unless profile_field.parent
        - if can? :destroy, profile_field
          = remove_button(profile_field)
    
  - # label
  %span.label-wrapper
    - if profile_field.parent || lock_label || cannot?(:update, profile_field)
      %span.label.profile_field_label= profile_field.label
    - else
      = best_in_place profile_field, :label, class: 'profile_field_label label', html_attrs: { placeholder: I18n.t(profile_field.underscored_type) }

  - # value
  %span.value-wrapper
    - if profile_field.children_count == 0
      = best_in_place_if can?(:update, profile_field), profile_field, :value, {as: input_type, class: 'value', collection: collection}
          
    - if profile_field.children_count > 0
      - if profile_field.type == 'ProfileFieldTypes::Address'
        #address_profile_field
          .do_not_show_in_edit_mode.address_profile_field.editable.value{class: (can?(:update, profile_field) ? 'can_edit' : ''), data: {profile_field_id: profile_field.id, profile_field_url: profile_field.url}}
            %p.name_and_surrounding= simple_format profile_field.profileable.name_with_surrounding
            .display_html= profile_field.display_html
          - if can?(:update, profile_field)
            .show_only_in_edit_mode
              %ul
                - profile_field.children.each do |child_field|
                  = render partial: 'profile_fields/profile_field', object: child_field

          = render partial: 'profile_fields/postal_address_flag_switch', locals: { profile_field: profile_field }

          - if can?(:update, profile_field)
            - if profile_field.needs_review?
              .address_needs_review
                .label.label-warning=t :address_needs_review
                = link_to(profile_field_path(profile_field, 'profile_field[needs_review]' => false), method: :put, remote: true, :class => 'btn btn-small btn-success confirm-review-button', title: I18n.t(:confirm_review)) do
                  = icon 'ok'
            

      - else # profile fields that are no addresses:
        %ul
          - profile_field.children.each do |child_field|
            = render partial: 'profile_fields/profile_field', object: child_field
      
    - # render partial: 'shared/flags', locals: { flagable: profile_field }
